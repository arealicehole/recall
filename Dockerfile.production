# Multi-stage build for smaller production images
FROM python:3.11-slim as builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    && rm -rf /var/lib/apt/lists/*

# Set work directory
WORKDIR /app

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir --user -r requirements.txt

# Production stage
FROM python:3.11-slim

# Install only runtime dependencies
RUN apt-get update && apt-get install -y \
    ffmpeg \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user for security
RUN groupadd -r recall && useradd -r -g recall recall

# Copy installed packages from builder stage
COPY --from=builder /root/.local /home/recall/.local

# Set work directory
WORKDIR /app

# Copy project files
COPY . .

# Create necessary directories and set permissions
RUN mkdir -p /app/transcripts /app/uploads /app/config /app/logs \
    && chown -R recall:recall /app

# Switch to non-root user
USER recall

# Add local bin to PATH
ENV PATH=/home/recall/.local/bin:$PATH

# Expose Flask port
EXPOSE 5000

# Health check using the API status endpoint
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:5000/api/status || exit 1

# Set environment variables for production
ENV PYTHONUNBUFFERED=1
ENV FLASK_ENV=production
ENV PYTHONPATH=/app

# Run the production web server
CMD ["python", "run_web_production.py"] 